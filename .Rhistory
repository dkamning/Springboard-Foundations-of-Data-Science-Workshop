install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
install_from_swirl("Open intro")
install_from_swirl("Regression Models")
install_from_swirl("Getting and cleaning data")
install_from_swirl("Data analysis")
swirl()
0
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Open Intro")
library(xts)
library(quantmod)
prices <- getSymbols("GOOG", auto.assign = FALSE)
move <- Cl(last(prices)) - Op(last(prices))
ifelse(move > 0, "BUY","SELL")
chartSeries(prices, theme = chartTheme("white", bg.color = "white"))
as.data.frame([1:5, 1:4])
move <- Cl(last(prices)) - Op(last(prices))
as.data.frame(prices)[1:5, 1:4]
#Load packages
head(hflights)
flights <- tbl_df(hflights)
#Load packages
library(dplyr)
library(hflights)
#Explore data
data(hflights)
install.packages(dpyr)
install.packages(dplyr)
install.packages(c("plyr", "dplyr", "hflights", "dygraphs", "xts", "quantmod"))
dygraph( nhtemp, main = "New Haven Temperatures") %>%
prices <- getSymbols("GOOG", auto.assign = FALSE)
move <- Cl(last(prices)) - Op(last(prices))
ifelse(move > 0, "BUY","SELL")
chartSeries(prices, theme = chartTheme("white", bg.color = "white"))
as.data.frame(prices)[1:5, 1:4]
data(hflights)
install.packages(hflights)
#Explore data
install.packages(dplyr)
install.packages(hflights)
library(dplyr)
library(hflights)
#Load packages
library(dplyr)
library(hflights)
#Explore data
data(hflights)
head(hflights)
library(dplyr)
library(hflights)
#Explore data
data(hflights)
head(hflights)
#Create a local data frame
flights <- tbl_df(hflights)
#Load packages
library(dplyr)
library(hflights)
#Explore data
data(hflights)
head(hflights)
#Create a local data frame
flights <- tbl_df(hflights)
flights
print(flights, n=20)
#Convert to a normal data frame to see all the columns
data.frame( head(flights))
##FILTER
#Load packages
library(dplyr)
library(hflights)
#Explore data
data(hflights)
head(hflights)
#Create a local data frame
flights <- tbl_df(hflights)
flights
print(flights, n=20)
#Convert to a normal data frame to see all the columns
data.frame( head(flights))
##FILTER: Keep rows matching criteria
#base R approach
flights[flights$Month == 1 & flights$DayofMonth ==1, ]
#Load packages
library(dplyr)
library(hflights)
#Explore data
data(hflights)
head(hflights)
#Create a local data frame
flights <- tbl_df(hflights)
flights
print(flights, n=20)
#Convert to a normal data frame to see all the columns
data.frame( head(flights))
##FILTER: Keep rows matching criteria
#base R approach
flights[flights$Month == 1 & flights$DayofMonth ==1, ]
#dlpy approach
filter(flights, Month ==1, DayOfMonth ==1)
#Load packages
library(dplyr)
library(hflights)
#Explore data
data(hflights)
head(hflights)
#Create a local data frame
flights <- tbl_df(hflights)
flights
print(flights, n=20)
#Convert to a normal data frame to see all the columns
data.frame( head(flights))
##FILTER: Keep rows matching criteria
#base R approach
flights[flights$Month == 1 & flights$DayofMonth ==1, ]
#dlpy approach
filter(flights, Month ==1, DayofMonth ==1)
#Load packages
library(dplyr)
library(hflights)
#Explore data
data(hflights)
head(hflights)
#Create a local data frame
flights <- tbl_df(hflights)
flights
print(flights, n=20)
#Convert to a normal data frame to see all the columns
data.frame( head(flights))
##FILTER: Keep rows matching criteria
#base R approach
flights[flights$Month == 1 & flights$DayofMonth ==1, ]
#dlpyr approach
filter(flights, Month ==1, DayofMonth ==1)
filter(flights, uniquecarrier == "AA" | uniquecarrier = "UA")
#Load packages
library(dplyr)
library(hflights)
#Explore data
data(hflights)
head(hflights)
#Create a local data frame
flights <- tbl_df(hflights)
flights
print(flights, n=20)
#Convert to a normal data frame to see all the columns
data.frame( head(flights))
##FILTER: Keep rows matching criteria
#base R approach
flights[flights$Month == 1 & flights$DayofMonth ==1, ]
#dlpyr approach
filter(flights, Month ==1, DayofMonth ==1)
filter(flights, uniquecarrier == "AA" | uniquecarrier == "UA")
#Load packages
library(dplyr)
library(hflights)
#Explore data
data(hflights)
head(hflights)
#Create a local data frame
flights <- tbl_df(hflights)
flights
print(flights, n=20)
#Convert to a normal data frame to see all the columns
data.frame( head(flights))
##FILTER: Keep rows matching criteria
#base R approach
flights[flights$Month == 1 & flights$DayofMonth ==1, ]
#dlpyr approach
filter(flights, Month ==1, DayofMonth ==1)
#OR
filter(flights, uniqueCarrier == "AA" | uniqueCarrier == "UA")
#%in% operator
filter(flights, uniqueCarrier %in% c("AA", "UA"))
detach("package:hflights", unload=TRUE)
filter(flights, UniqueCarrier == "AA" | UniqueCarrier == "UA")
##FILTER: Keep rows matching criteria
#base R approach
flights[flights$Month == 1 & flights$DayofMonth ==1, ]
#dlpyr approach
filter(flights, Month ==1, DayofMonth ==1)
#OR
filter(flights, UniqueCarrier == "AA" | UniqueCarrier == "UA")
filter(flights, UniqueCarrier == "AA" | UniqueCarrier == "UA")
filter(flights, UniqueCarrier == "AA" | UniqueCarrier == "UA")
filter(flights, UniqueCarrier == "AA" | UniqueCarrier == "UA")
filter(flights, UniqueCarrier == "AA" | UniqueCarrier == "UA")
data.frame( head(flights))
##FILTER: Keep rows matching criteria
#base R approach
flights[flights$Month == 1 & flights$DayofMonth ==1, ]
#dlpyr approach
filter(flights, Month ==1 & DayofMonth ==1)
#OR
#OR
#OR
#OR
#dlpyr approach
filter(flights, Month ==1 , DayofMonth ==1)
#OR
#OR
filter(flights, UniqueCarrier == "AA" | UniqueCarrier == "UA")
filter(flights, UniqueCarrier == "AA" | UniqueCarrier == "UA")
#%in% operator
filter(flights, UniqueCarrier %in% c("AA", "UA"))
#base R approach
flights[, c("DepTime", "AirTime", "FlightNum")]
select(flights, DepTime, AirTime, FlightNum)
flights[, c("DepTime", "ArrTime", "FlightNum")]
select(flights, DepTime, ArrTime, FlightNum)
select(flights, Year,DayofMonth, contains("Taxi"), contains("Delay"))
select(flights, Year:DayofMonth, contains("Taxi"), contains("Delay"))
##Chaining or pipelining
flights( select(flighs, UniqueCarrier, DepDelay), DepDelay > 60)
filter( select(flighs, UniqueCarrier, DepDelay), DepDelay > 60)
filter( select(flights, UniqueCarrier, DepDelay), DepDelay > 60)
#chaining method
flights %>%
select(UniqueCarrier, DepDelay) %>%
filter(DepDelay > 60)
sqrt( sum((x1 - x2)^2 ) )
x1 <- 1:5; x2 <- 2:6;
#basic euclidean distance
sqrt( sum((x1 - x2)^2 ) )
#Chaining method
(x1 - x2)^2 %>% sum() %>% sqrt()
flights[ order(flights$DepDelay), c("UniqueCarrier", "DepDelay")]
#dplyr approach
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay)
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(desc(DepDelay) )
flights$Speed <- flights$Distance / flights$AirTime * 60
#basic R
flights$Speed <- flights$Distance / flights$AirTime * 60
flights[, c("Distance", "AirTime", "Speed")]
#dplyr approach that does not store the var
flights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/AirTime * 60)
#dplyr approach that stores the var
flights <- flights %>% mutate(Speed = Distance/AirTime*60)
flights <- flights %>% mutate(Speed = Distance/AirTime*60)
head( with(flights, tapply(ArrDekay, Dest, mean, na.rm = TRUE)))
head( with(flights, tapply(ArrDelay, Dest, mean, na.rm = TRUE)))
head( aggregate(ArrDelay ~ Dest, flights, mean))
head( aggregate(ArrDelay ~ Dest, flights, mean))
head( aggregate(ArrDelay ~ Dest, flights, mean))
#dplyr approach
flights %>%
group_by(Dest) %>%
summarise(avg_delay ! mean(ArrDelay, na.rm = TRUE))
flights %>%
group_by(Dest) %>%
summarise(avg_delay , mean(ArrDelay, na.rm = TRUE))
flights %>%
group_by(Dest) %>%
summarise(avg_delay ~ mean(ArrDelay, na.rm = TRUE))
#dplyr approach
flights %>%
group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm = TRUE))
#summarise_each: same fction on multiple columns
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Cancelled, Diverted)
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(min(., na.rm=TRUE), max(., na.rm=TRYE)),
matches("Delay"))
#min and max arrival and departure delay for each carrier
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(min(., na.rm=TRUE), max(., na.rm=TRYE)),
matches("Delay"))
#min and max arrival and departure delay for each carrier
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(min(., na.rm=TRUE), max(., na.rm=TRUE)),
matches("Delay"))
detach("package:dplyr", unload=TRUE)
#For each day of the year, count the total number of flights and sort in desc
flights %>%
group_by(Month, DayofMonth) %>%
summarise(flight_count = n()) %>%
arrange( desc(flight_count))
#Load packages
library(dplyr)
library(hflights)
#Explore data
data(hflights)
head(hflights)
#Create a local data frame
flights <- tbl_df(hflights)
flights
print(flights, n=20)
#Convert to a normal data frame to see all the columns
data.frame( head(flights))
##FILTER: Keep rows matching criteria
#base R approach
flights[flights$Month == 1 & flights$DayofMonth ==1, ]
#dlpyr approach, comma or & works
filter(flights, Month ==1 , DayofMonth ==1)
#OR
filter(flights, UniqueCarrier == "AA" | UniqueCarrier == "UA")
#%in% operator
filter(flights, UniqueCarrier %in% c("AA", "UA"))
##SELECT: pick columns by name
#base R approach
flights[, c("DepTime", "ArrTime", "FlightNum")]
#dplyr approach
select(flights, DepTime, ArrTime, FlightNum)
#others: starts_with, ends_with, matches()
select(flights, Year:DayofMonth, contains("Taxi"), contains("Delay"))
##Chaining or pipelining
#nesting method
filter( select(flights, UniqueCarrier, DepDelay), DepDelay > 60)
#chaining method with then
flights %>%
select(UniqueCarrier, DepDelay) %>%
filter(DepDelay > 60)
x1 <- 1:5; x2 <- 2:6;
#basic euclidean distance
sqrt( sum((x1 - x2)^2 ) )
#Chaining method
(x1 - x2)^2 %>% sum() %>% sqrt()
##REARRANGE: order rows
#basic R
flights[ order(flights$DepDelay), c("UniqueCarrier", "DepDelay")]
#dplyr approach
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay)
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(desc(DepDelay) )
##MUTATE: Add new variables
#basic R
flights$Speed <- flights$Distance / flights$AirTime * 60
flights[, c("Distance", "AirTime", "Speed")]
#dplyr approach that does not store the var
flights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/AirTime * 60)
#dplyr approach that stores the var
flights <- flights %>% mutate(Speed = Distance/AirTime*60)
##SUMMARIZE: Reduce variables to values
#base R to clculate average arrival delay to each destination
head( with(flights, tapply(ArrDelay, Dest, mean, na.rm = TRUE)))
head( aggregate(ArrDelay ~ Dest, flights, mean))
#dplyr approach
flights %>%
group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm = TRUE))
#summarise_each: same fction on multiple columns
#Average diverted, average cancelled for each carrier
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Cancelled, Diverted)
#min and max arrival and departure delay for each carrier
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(min(., na.rm=TRUE), max(., na.rm=TRUE)),
matches("Delay"))
##HELPER FUNCTIONS: n() : counts the total number of rows in a group
##                n_distinct(vector): counts the number of unique items in that vector
#For each day of the year, count the total number of flights and sort in desc
flights %>%
group_by(Month, DayofMonth) %>%
summarise(flight_count = n()) %>%
arrange( desc(flight_count))
flights %>%
group_by(Month, DayofMonth) %>%
summarise(flight_count = n()) %>%
arrange( desc(flight_count))
flights %>%
group_by(Month, DayofMonth) %>%
tally( sort = TRUE)
#For each dest, count the total number of flights and the number of distinct planes that flew there
flights %>%
group_by(Dest) %>%
summarise(flight_count = n(), plane_count = n_distinct(TailNum))
#For each dest, show the number of cancelled and not cancelled flights
flights %>%
group_by(Dest) %>%
select(Cancelled) %>%
table() %>%
head()
##WINDOW FUNCTIONS
flights %>%
group_by(Dest) %>%
select(Cancelled) %>%
table() %>%
head()
flights %>%
group_by(UniqueCarrier) %>%
select(Month, DayofMonth, DepDelay) %>%
filter(min_rank( desc(DepDelay)) <= 2) %>%
arrange(UniqueCarrier, desc(DepDelay))
flights %>%
group_by(UniqueCarrier) %>%
select(Month, DayofMonth, DepDelay) %>%
top_n(2) %>%
arrange(UniqueCarrier, desc(DepDelay))
flights %>%
group_by(Month) %>%
summarise(flight_count = n()) %>%
mutate( change = flight_count - lag(flight_count))
#Simpler
flights %>%
group_by(Month ) %>%
tally() %>%
mutate( change = n - lag(n))
flights %>% sample_n(5)
flights %>% sample_frac(0.25, replace = TRUE)
glimse(flights)
glimpse(flights)
##Loadind dplyr and the nycflights13 dataset
```{r eval = FAlSE}
# remove flights data if you just finished the previous tutorial
rm(flights)
```
```{r}
#Load packages
suppressMessages(library(dplyr))
library(nycflights13)
install.packages("nycflights13")
install.packages("nycflights13")
setwd("F:/Springboard-Foundations-of-Data-Science-Workshop")
install.packages(c("ggplot2", "ggplot2movies"))
install.packages("data.table")
install.packages(c("quantmod", "xts"))
