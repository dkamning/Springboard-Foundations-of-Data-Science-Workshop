arguments = list(price = quote(Cl(mktdata)), n = 3),
# label it RSI_3
label = "RSI_3")
##### Code your own indicator - I ################
# Write the RSI_avg function
RSI_avg <- function(price, n1, n2) {
# RSI 1 takes an input of the price and n1
rsi_1 <- RSI(price = price, n = n1)
# RSI 2 takes an input of the price and n2
rsi_2 <- RSI(price = price, n = n2)
# RSI_avg is the average of rsi_1 and rsi_2
RSI_avg <- (rsi_1 + rsi_2)/2
# Your output of RSI_avg needs a column name of "RSI_avg"
colnames(RSI_avg) <- "RSI_avg"
return(RSI_avg)
}
# Add the RSI_avg function to your strategy using an n1 of 3 and an n2 of 4, and label it "RSI_3_4"
add.indicator(strategy.st, name = "RSI_avg", arguments = list(price = quote(Cl(mktdata)), n1 = 3, n2 = 4  ), label = "RSI_3_4")
###### David Varadi Oscillator (DVO for short), originated by David Varadi ###
# Declare the DVO function. The first argument is the high, low, and close of market data. The three arguments for your function will be HLC, navg (default to 2), and percentlookback (default to 126)
DVO <- function(HLC, navg = 2, percentlookback = 126) {
# Compute the ratio between closing prices to the average of high and low
ratio <- Cl(HLC) / ((Hi(HLC) + Lo(HLC))/2 )
# Smooth out the ratio outputs using a moving average
avgratio <- SMA(ratio, n = navg)
# Convert ratio into a 0-100 value using runPercentRank function
out <- runPercentRank( avgratio, n = percentlookback, exact.multiplier = 1) * 100
colnames(out) <- "DVO"
return(out)
}
##### Apply your own indicator ################
#In order to subset time-series data, use the command ts["YYYY-MM-DD/YYYY-MM-DD"]. For example, ts["2003-01-01/2003-12-31"] will subset data for all of 2003.
# add the DVO indicator to your strategy
add.indicator(strategy = strategy.st, name = "DVO",
arguments = list(HLC = quote(HLC(mktdata)), navg = 2, percentlookback = 126),
label = "DVO_2_126")
# use applyIndicators to test out your indicators
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mktdata))
add.indicator(strategy = strategy.st, name = "DVO",
arguments = list(HLC = quote(HLC(mktdata)), navg = 2, percentlookback = 126),
label = "DVO_2_126")
# use applyIndicators to test out your indicators
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mktdata))
View(mktdata['2004-11'])
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mydata))
install.packages("quantmod")
install.packages("quantmod")
install.packages("quantmod")
install.packages("quantmod")
install.packages("quantmod")
install.packages("~/R/TTR_0.23-1.zip", repos = NULL, type = "win.binary")
install.packages("~/R/TTR_0.23-1.zip", repos = NULL, type = "win.binary")
library(TTR)
install.packages("~/R/TTR_0.23-1.zip", repos = NULL, type = "win.binary")
library(TTR)
install.packages(TTR)
library(TTR)
install.packages("C:/Users/kamni/Documents/R/TTR_0.23-1.zip", repos = NULL, type="source")
install.packages(TTR)
library(TTR)
install.packages("FinancialInstrument")
install.packages("FinancialInstrument")
install.packages("C:/Users/kamni/AppData/Local/Temp/Rtmp4SsVTm/downloaded_packages/FinancialInstrument_1.2.0.zip", repos = NULL, type = "win.binary")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages("C:/Users/kamni/AppData/Local/Temp/Rtmp4SsVTm/downloaded_packages/PerformanceAnalytics_1.4.3541.zip", repos = NULL, type = "win.binary")
install.packages("foreach")
install.packages("foreach")
install.packages("C:/Users/kamni/AppData/Local/Temp/Rtmp4SsVTm/downloaded_packages/foreach_1.4.3.zip", repos = NULL, type = "win.binary")
install.packages("xts")
install.packages("xts")
install.packages("C:/Users/kamni/AppData/Local/Temp/Rtmp4SsVTm/downloaded_packages/xts_0.9-7.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/kamni/Documents/R/blotter_0.9.1741.zip", repos = NULL, type="source")
install.packages("C:/Users/kamni/Documents/R/quantstrat_0.9.1739.zip", repos = NULL, type="source")
library( quantmod)
library("quantmod", lib.loc="~/R/win-library/3.3")
library( xts)
install.packages("xts")
install.packages("C:/Users/kamni/AppData/Local/Temp/RtmpcjxRlP/downloaded_packages/xts_0.9-7.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/kamni/Documents/R/blotter_0.9.1741.zip", repos = NULL, type="source")
install.packages("C:/Users/kamni/Documents/R/quantstrat_0.9.1739.zip", repos = NULL, type="source")
library( xts)
library( quantmod)
library(quantstrat)
library(TTR)
library(dplyr)
library(data.table)
library(Quandl)
library(quantstrat)
library(PerformanceAnalytics)
library(blotter)
install.packages("PerformanceAnalytics")
install.packages("C:/Users/kamni/AppData/Local/Temp/RtmpcjxRlP/downloaded_packages/PerformanceAnalytics_1.4.3541.zip", repos = NULL, type = "win.binary")
library(PerformanceAnalytics)
library(blotter)
library(Quandl)
library(quantstrat)
library(quantstrat)
library( xts)
library( quantmod)
library(quantstrat)
library(dplyr)
library(data.table)
library(PerformanceAnalytics)
library(blotter)
library(Quandl)
library(quantstrat)
help( Cl)
help(plot)
help(par)
help( Cl)
help(plot)
help(par)
help( SMA)
mydata = Quandl("WIKI/AEP", start_date="2000-01-01", end_date="2016-11-30", type="raw")
head(mydata)
mydata <- mydata[, c( 1,2,3,4,5,6)]
head(mydata)
plot(  mydata$Date, mydata$Close, type = 'l')
lines( mydata$Date, SMA(  mydata$Close, n = 200), col = "red")
initdate <- "2000-01-01"
from <- "2003-01-01"
to <- "2015-12-31"
Sys.setenv(TZ = "UTC")
currency("USD")
stock("mydata", currency = "USD")
tradesize <- 100000
initeq <- 100000
strategy.st <- "firststrat"
portfolio.st <- "firststrat"
account.st <- "firststrat"
rm.strat(strategy.st)
initPortf(portfolio.st, symbols = "mydata", initDate = initdate, currency = "USD")
initAcct(account.st, portfolios = portfolio.st, initDate = initdate, currency = "USD", initEq = initeq)
initOrders(portfolio.st, initDate = initdate)
strategy(strategy.st, store = TRUE)
spy_sma <- SMA( x = mydata$Close, n = 200)
spy_rsi <- RSI( price = mydata$Close, n = 3)
plot(mydata$Date, mydata$Close, type = "l")
lines(mydata$Date, SMA( mydata$Close, n = 200), col = "red", type = "l")
"trend"
plot(mydata$Date, mydata$Close, type = "l")
plot(mydata$Date, RSI(mydata$Close, n = 2), type = "l")
"reversion"
add.indicator(strategy = strategy.st,
# Add the SMA function
name = "SMA",
# Create a lookback period
arguments = list(x = quote( Cl(mktdata) ), n = 200),
# Label your indicator SMA200
label = "SMA200")
add.indicator(strategy = strategy.st,
# Add the SMA function
name = "SMA",
# Create a lookback period
arguments = list(x = quote(Cl(mktdata)), n = 50),
# Label your indicator SMA50
label = "SMA50")
add.indicator(strategy = strategy.st,
# add an RSI function to your strategy
name = "RSI",
# use a lookback period of 3 days
arguments = list(price = quote(Cl(mktdata)), n = 3),
# label it RSI_3
label = "RSI_3")
RSI_avg <- function(price, n1, n2) {
# RSI 1 takes an input of the price and n1
rsi_1 <- RSI(price = price, n = n1)
# RSI 2 takes an input of the price and n2
rsi_2 <- RSI(price = price, n = n2)
# RSI_avg is the average of rsi_1 and rsi_2
RSI_avg <- (rsi_1 + rsi_2)/2
# Your output of RSI_avg needs a column name of "RSI_avg"
colnames(RSI_avg) <- "RSI_avg"
return(RSI_avg)
}
add.indicator(strategy.st, name = "RSI_avg", arguments = list(price = quote(Cl(mktdata)), n1 = 3, n2 = 4  ), label = "RSI_3_4")
DVO <- function(HLC, navg = 2, percentlookback = 126) {
# Compute the ratio between closing prices to the average of high and low
ratio <- Cl(HLC) / ((Hi(HLC) + Lo(HLC))/2 )
# Smooth out the ratio outputs using a moving average
avgratio <- SMA(ratio, n = navg)
# Convert ratio into a 0-100 value using runPercentRank function
out <- runPercentRank( avgratio, n = percentlookback, exact.multiplier = 1) * 100
colnames(out) <- "DVO"
return(out)
}
add.indicator(strategy = strategy.st, name = "DVO",
arguments = list(HLC = quote(HLC(mktdata)), navg = 2, percentlookback = 126),
label = "DVO_2_126")
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mydata))
test_subset <- test["2013-09-01/2013-09-05"]
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mydata))
OHLC(mydata)
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mydata))
help(applyIndicators)
mktdata = OHLC(mydata)
View(mktdata)
View(mydata)
help("OHLC")
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mydata))
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mydata))
View(mktdata)
View(mydata)
help(ohlcv)
help("OHLCV")
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mydata))
mydata = Quandl("WIKI/AEP", start_date="2000-01-01", end_date="2016-11-30", type="raw")
head(mydata)
mydata = Quandl("WIKI/AEP", start_date="2000-01-01", end_date="2016-11-30", type="xts")
head(mydata)
plot(  mydata$Date, mydata$Close, type = 'l')
lines( mydata$Date, SMA(  mydata$Close, n = 200), col = "red")
plot( Cl(mydata ), type = 'l')
lines( mydata$Date, SMA(  Cl(mydata ), n = 200), col = "red")
lines( mydata$Date, SMA(  mydata, n = 200), col = "red")
help( SMA)
lines( mydata$Date, SMA(  ttrc[,"Close"], n = 200), col = "red")
lines( mydata$Date, SMA(  mydata[,"Close"], n = 200), col = "red")
lines( mydata$Date, SMA(  mydata$Close, n = 200), col = "red")
lines( mydata$Date, SMA(  Cl(mydata ), n = 200), col = "red")
mydata$Date
help(lines)
lines( SMA(  Cl(mydata ), n = 200), col = "red")
mydata = Quandl("WIKI/AEP", start_date="2000-01-01", end_date="2016-11-30", type="raw")
head(mydata)
mydata <- mydata[, c( 1,2,3,4,5,6)]
head(mydata)
mydata <- as.xts( mydata)
mydata = Quandl("WIKI/AEP", start_date="2000-01-01", end_date="2016-11-30", type="xts")
head(mydata)
mydata <- mydata[, c( 1,2,3,4,5,6)]
head(mydata)
mydata <- mydata[, c( 1,2,3,4,5,6)]
plot( Cl(mydata ), type = 'l')
lines( SMA(  Cl(mydata ), n = 200), col = "red")
initdate <- "2000-01-01"
from <- "2003-01-01"
to <- "2015-12-31"
Sys.setenv(TZ = "UTC")
currency("USD")
stock("mydata", currency = "USD")
tradesize <- 100000
initeq <- 100000
strategy.st <- "firststrat"
portfolio.st <- "firststrat"
account.st <- "firststrat"
rm.strat(strategy.st)
initPortf(portfolio.st, symbols = "mydata", initDate = initdate, currency = "USD")
initAcct(account.st, portfolios = portfolio.st, initDate = initdate, currency = "USD", initEq = initeq)
initOrders(portfolio.st, initDate = initdate)
strategy(strategy.st, store = TRUE)
spy_sma <- SMA( x = mydata$Close, n = 200)
spy_rsi <- RSI( price = mydata$Close, n = 3)
plot(mydata$Date, mydata$Close, type = "l")
plot(Cl(mydata), type = "l")
lines(SMA( Cl(mydata), n = 200), col = "red", type = "l")
plot( Cl(mydata), type = "l")
plot( RSI( Cl(mydata), n = 2), type = "l")
"reversion"
add.indicator(strategy = strategy.st,
# Add the SMA function
name = "SMA",
# Create a lookback period
arguments = list(x = quote( Cl(mktdata) ), n = 200),
# Label your indicator SMA200
label = "SMA200")
add.indicator(strategy = strategy.st,
# Add the SMA function
name = "SMA",
# Create a lookback period
arguments = list(x = quote(Cl(mktdata)), n = 50),
# Label your indicator SMA50
label = "SMA50")
add.indicator(strategy = strategy.st,
# add an RSI function to your strategy
name = "RSI",
# use a lookback period of 3 days
arguments = list(price = quote(Cl(mktdata)), n = 3),
# label it RSI_3
label = "RSI_3")
RSI_avg <- function(price, n1, n2) {
# RSI 1 takes an input of the price and n1
rsi_1 <- RSI(price = price, n = n1)
# RSI 2 takes an input of the price and n2
rsi_2 <- RSI(price = price, n = n2)
# RSI_avg is the average of rsi_1 and rsi_2
RSI_avg <- (rsi_1 + rsi_2)/2
# Your output of RSI_avg needs a column name of "RSI_avg"
colnames(RSI_avg) <- "RSI_avg"
return(RSI_avg)
}
add.indicator(strategy.st, name = "RSI_avg", arguments = list(price = quote(Cl(mktdata)), n1 = 3, n2 = 4  ), label = "RSI_3_4")
DVO <- function(HLC, navg = 2, percentlookback = 126) {
# Compute the ratio between closing prices to the average of high and low
ratio <- Cl(HLC) / ((Hi(HLC) + Lo(HLC))/2 )
# Smooth out the ratio outputs using a moving average
avgratio <- SMA(ratio, n = navg)
# Convert ratio into a 0-100 value using runPercentRank function
out <- runPercentRank( avgratio, n = percentlookback, exact.multiplier = 1) * 100
colnames(out) <- "DVO"
return(out)
}
add.indicator(strategy = strategy.st, name = "DVO",
arguments = list(HLC = quote(HLC(mktdata)), navg = 2, percentlookback = 126),
label = "DVO_2_126")
help(applyIndicators)
help("OHLCV")
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mydata))
test_subset <- test["2013-09-01/2013-09-05"]
DVO <- function(HLC, navg = 2, percentlookback = 126) {
# Compute the ratio between closing prices to the average of high and low
ratio <- Cl(HLC) / ((Hi(HLC) + Lo(HLC))/2 )
# Smooth out the ratio outputs using a moving average
avgratio <- SMA(ratio, n = navg)
# Convert ratio into a 0-100 value using runPercentRank function
out <- runPercentRank( avgratio, n = percentlookback, exact.multiplier = 1) * 100
colnames(out) <- "DVO"
return(out)
}
test
test_subset <- test["2013-09-01/2013-09-05"]
test_subset
DVO <- function(HLC, navg = 2, percentlookback = 126) {
# Compute the ratio between closing prices to the average of high and low
ratio <- Cl(HLC) / ((Hi(HLC) + Lo(HLC))/2 )
# Smooth out the ratio outputs using a moving average
avgratio <- SMA(ratio, n = navg)
# Convert ratio into a 0-100 value using runPercentRank function
out <- runPercentRank( avgratio, n = percentlookback, exact.multiplier = 1) * 100
colnames(out) <- "DVO"
return(out)
}
add.indicator(strategy = strategy.st, name = "DVO",
arguments = list(HLC = quote(HLC(mktdata)), navg = 2, percentlookback = 126),
label = "DVO_2_126")
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mktdata))
head(test)
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mktdata))
head(test)
test_subset <- test["2013-09-01/2013-09-05"]
test_subset
DVO <- function(HLC, navg = 2, percentlookback = 126) {
# Compute the ratio between closing prices to the average of high and low
ratio <- Cl(HLC) / ((Hi(HLC) + Lo(HLC))/2 )
# Smooth out the ratio outputs using a moving average
avgratio <- SMA(ratio, n = navg)
# Convert ratio into a 0-100 value using runPercentRank function
out <- runPercentRank( avgratio, n = percentlookback, exact.multiplier = 1) * 100
colnames(out) <- "DVO"
return(out)
}
add.indicator(strategy = strategy.st, name = "DVO",
arguments = list(HLC = quote(HLC(mktdata)), navg = 2, percentlookback = 126),
label = "DVO_2_126")
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mktdata))
head(test)
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mktdata))
head(test)
test_subset <- test["2013-09-01/2013-09-05"]
test_subset
DVO <- function(HLC, navg = 2, percentlookback = 126) {
# Compute the ratio between closing prices to the average of high and low
ratio <- Cl(HLC) / ((Hi(HLC) + Lo(HLC))/2 )
# Smooth out the ratio outputs using a moving average
avgratio <- SMA(ratio, n = navg)
# Convert ratio into a 0-100 value using runPercentRank function
out <- runPercentRank( avgratio, n = percentlookback, exact.multiplier = 1) * 100
colnames(out) <- "DVO"
return(out)
}
add.indicator(strategy = strategy.st, name = "DVO",
arguments = list(HLC = quote(HLC(mktdata)), navg = 2, percentlookback = 126),
label = "DVO_2_126")
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mktdata))
head(test)
test_subset <- test["2013-09-01/2013-09-05"]
test_subset
DVO <- function(HLC, navg = 2, percentlookback = 126) {
# Compute the ratio between closing prices to the average of high and low
ratio <- Cl(HLC) / ((Hi(HLC) + Lo(HLC))/2 )
# Smooth out the ratio outputs using a moving average
avgratio <- SMA(ratio, n = navg)
# Convert ratio into a 0-100 value using runPercentRank function
out <- runPercentRank( avgratio, n = percentlookback, exact.multiplier = 1) * 100
colnames(out) <- "DVO"
return(out)
}
add.indicator(strategy = strategy.st, name = "DVO",
arguments = list(HLC = quote(HLC(mktdata)), navg = 2, percentlookback = 126),
label = "DVO_2_126")
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mktdata))
head(test)
test_subset
test_subset <- test["2013-09-01/2013-09-05"]
test_subset
DVO <- function(HLC, navg = 2, percentlookback = 126) {
# Compute the ratio between closing prices to the average of high and low
ratio <- Cl(HLC) / ((Hi(HLC) + Lo(HLC))/2 )
# Smooth out the ratio outputs using a moving average
avgratio <- SMA(ratio, n = navg)
# Convert ratio into a 0-100 value using runPercentRank function
out <- runPercentRank( avgratio, n = percentlookback, exact.multiplier = 1) * 100
colnames(out) <- "DVO"
return(out)
}
add.indicator(strategy = strategy.st, name = "DVO",
arguments = list(HLC = quote(HLC(mktdata)), navg = 2, percentlookback = 126),
label = "DVO_2_126")
test <- applyIndicators(strategy = strategy.st, mktdata = OHLC(mktdata))
test_subset <- test["2013-09-01/2013-09-05"]
test_subset
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
q()
help(tradestats)
help(tradeStats)
help(tradeStats)
library(rmarkdown)
library(slidify)
library(slidifyLibraries)
require(devtools)
library(slidify)
install(devtools)
NH11 <- readRDS("dataSets/NatHealth2011.rds")
labs <- attributes(NH11)$labels
help(readRDS)
NH11 <- readRDS("./dataSets/NatHealth2011.rds")
labs <- attributes(NH11)$labels
NH11 <- readRDS("./dataSets/NatHealth2011.rds")
NH11 <- readRDS("/dataSets/NatHealth2011.rds")
setwd("F:/Springboard-Foundations-of-Data-Science-Workshop/Machine Learning/logistic_regression")
NH11 <- readRDS("dataSets/NatHealth2011.rds")
labs <- attributes(NH11)$labels
str(NH11$hypev) # check stucture of hypev
levels(NH11$hypev) # check levels of hypev
NH11$hypev <- factor(NH11$hypev, levels=c("2 No", "1 Yes"))
hyp.out <- glm(hypev~age_p+sex+sleep+bmi,
data=NH11, family="binomial")
coef(summary(hyp.out))
hyp.out.tab <- coef(summary(hyp.out))
hyp.out.tab[, "Estimate"] <- exp(coef(hyp.out))
hyp.out.tab
predDat <- with(NH11,
expand.grid(age_p = c(33, 63),
sex = "2 Female",
bmi = mean(bmi, na.rm = TRUE),
sleep = mean(sleep, na.rm = TRUE)))
cbind(predDat, predict(hyp.out, type = "response",
se.fit = TRUE, interval="confidence",
newdata = predDat))
library(effects)
install.packages("effects")
library(effects)
plot(allEffects(hyp.out))
labs
str(NH11$everwrk) # check stucture of everwrk
levels(NH11$everwrk) # check levels of everwrk
str(NH11$everwrk) # check stucture of everwrk
levels(NH11$everwrk) # check levels of everwrk
NH11$everwrk <- factor(NH11$everwrk, levels=c("2 No", "1 Yes"))
str(NH11$everwrk) # check stucture of everwrk
levels(NH11$everwrk) # check levels of everwrk
everwrk.out <- glm(everwrk~age_p+r_maritl,
data=NH11, family="binomial")
coef(summary(everwrk.out))
everwrk.out.tab <- coef(summary(everwrk.out))
everwrk.out.tab[, "Estimate"] <- exp(coef(everwrk.out))
everwrk.out.tab
up
plot( allEffects( everwrk.out))
predDat_everwrk <- with(NH11,
expand.grid(age_p = mean(age_p, na.rm = TRUE) ,
r_maritl = levels(NH11$r_maritl)
))
cbind(predDat_everwrk, predict( everwrk.out, type = "response",
se.fit = TRUE, interval="confidence",
newdata = predDat_everwrk))
help("levels")
levels(NH11$r_maritl)
predDat_everwrk <- with(NH11,
expand.grid(age_p = mean(age_p, na.rm = TRUE)
#, r_maritl = levels(NH11$r_maritl)
))
cbind(predDat_everwrk, predict( everwrk.out, type = "response",
se.fit = TRUE, interval="confidence",
newdata = predDat_everwrk))
help( expand.grid)
predDat_everwrk <- with(NH11,
expand.grid(age_p = mean(age_p, na.rm = TRUE)
, r_maritl = r_maritl
))
cbind(predDat_everwrk, predict( everwrk.out, type = "response",
se.fit = TRUE, interval="confidence",
newdata = predDat_everwrk))
plot( allEffects( everwrk.out))
predDat_everwrk <- with(NH11,
expand.grid(age_p = mean(age_p, na.rm = TRUE)
, r_maritl = factor(r_maritl)
))
cbind(predDat_everwrk, predict( everwrk.out, type = "response",
se.fit = TRUE, interval="confidence",
newdata = predDat_everwrk))
predDat_everwrk <- with(NH11,
expand.grid(age_p = mean(age_p, na.rm = TRUE)
, r_maritl = r_maritl
, stringsAsFactors = TRUE))
cbind(predDat_everwrk, predict( everwrk.out, type = "response",
se.fit = TRUE, interval="confidence",
newdata = predDat_everwrk))
